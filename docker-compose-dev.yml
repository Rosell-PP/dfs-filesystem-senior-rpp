# PARA ENTORNO DE DESARROLLO

### Redes
### Subred        172.19.2.0/27 (Primer Bloque en la 172.19.2.0/27)
### Usable hosts  172.19.2.1 - 172.19.2.30
### Broadcast     172.19.2.31
networks:
    dfs-network:
        driver: bridge
        ipam:
            driver: default
            config:
                - subnet: "172.19.2.0/27"

###
### Servicios para levantar la App 'DFS Filesystem':
###
###  1 - Php 8.3 para servir la App Laravel
###  2 - Mysql para base de datos
###  3 - Redis para caché de App Laravel
###  4 - Minio para almacenar los archivos, sistema de almacenamiento semejante a s3 de aws
###  5 - Mailpit para servidor de correo local
###  6 - App frontend desarrollada utilizando vuetify
###  7 - PhpMyAdmin para gestionar la base de datos
###  8 - Soketi para servidor websockets similar a pusher
###  9 - Ejecuta la cola de trabajo de laravel (php artisan queue:work)
###
services:
    ###
    ### 1 - Php 8.3 para servir la App Laravel
    ###
    dfs-app-backend:
        build:
            context: './docker/php8.3'
            dockerfile: Dockerfile
            args:
                WWWGROUP: '${WWWGROUP}'
        image: 'dfs-filesystem/app'
        container_name: dfs-app-backend  
        extra_hosts:
            - 'host.docker.internal:host-gateway'
        ports:
            - '${APP_PORT:-80}:80'
        environment:
            WWWUSER: '${WWWUSER}'
            LARAVEL_SAIL: 1
            XDEBUG_MODE: '${SAIL_XDEBUG_MODE:-off}'
            XDEBUG_CONFIG: '${SAIL_XDEBUG_CONFIG:-client_host=host.docker.internal}'
            IGNITION_LOCAL_SITES_PATH: '${PWD}'
        volumes:
            - './backend/:/var/www/html'
        networks:
            - dfs-network
        depends_on:
            - mysql
            - redis
            - minio
            - mailpit
        
    ###
    ###  2 - Mysql para base de datos
    ###
    mysql:
        image: 'mysql/mysql-server:8.0'
        ports:
            - '${FORWARD_DB_PORT:-3306}:3306'
        environment:
            MYSQL_ROOT_PASSWORD: '${DB_PASSWORD}'
            MYSQL_ROOT_HOST: '%'
            MYSQL_DATABASE: '${DB_DATABASE}'
            MYSQL_USER: '${DB_USERNAME}'
            MYSQL_PASSWORD: '${DB_PASSWORD}'
            MYSQL_ALLOW_EMPTY_PASSWORD: 1
        volumes:
            - 'sail-mysql:/var/lib/mysql'
        networks:
            - dfs-network
        healthcheck:
            test:
                - CMD
                - mysqladmin
                - ping
                - '-p${DB_PASSWORD}'
            retries: 3
            timeout: 5s
    
    ###
    ###  3 - Redis para caché de App Laravel
    ###
    redis:
        image: 'redis:alpine'
        ports:
            - '${FORWARD_REDIS_PORT:-6379}:6379'
        volumes:
            - 'sail-redis:/data'
        networks:
            - dfs-network
        healthcheck:
            test:
                - CMD
                - redis-cli
                - ping
            retries: 3
            timeout: 5s
    
    ###
    ###  4 - Minio para almacenar los archivos, sistema de almacenamiento semejante a s3 de aws
    ###
    minio:
        image: 'minio/minio:latest'
        ports:
            - '${FORWARD_MINIO_PORT:-9000}:9000'
            - '${FORWARD_MINIO_CONSOLE_PORT:-8900}:8900'
        environment:
            MINIO_ROOT_USER: sail
            MINIO_ROOT_PASSWORD: password
        volumes:
            - 'sail-minio:/data'
        networks:
            - dfs-network
        command: 'minio server /data --console-address ":8900"'
        healthcheck:
            test:
                - CMD
                - mc
                - ready
                - local
            retries: 3
            timeout: 5s
    
    ###
    ###  5 - Mailpit para servidor de correo local
    ###
    mailpit:
        image: 'axllent/mailpit:latest'
        ports:
            - '${FORWARD_MAILPIT_PORT:-1025}:1025'
            - '${FORWARD_MAILPIT_DASHBOARD_PORT:-8025}:8025'
        networks:
            - dfs-network
    
    ###
    ###  6 - App frontend desarrollada utilizando vuetify
    ###
    dfs-app-frontend:  
        build:
            context: ./frontend/
            dockerfile: Dockerfile  
        image: 'dfs-filesystem/frontend'
        container_name: dfs-app-frontend
        ports:
            - "8087:3000"
        volumes:
            - ./frontend/:/app
        networks:  
            - dfs-network  
        command: npm run dev -- --host

    ###
    ###  7 - PhpMyAdmin para gestionar la base de datos
    ###
    myadmin:
        image: phpmyadmin/phpmyadmin:latest
        depends_on:
            - mysql
        ports:
            - 8086:80
        environment:
            PMA_HOST: mysql
            PMA_PORT: 3306
            PMA_USER: '${DB_USERNAME}'
            PMA_PASSWORD: '${DB_PASSWORD}'
        networks:
            - dfs-network
        deploy:
            resources:
                limits:
                    cpus: "1"
                    memory: 256M

    ###
    ###  8 - Soketi para servidor de websocket como pusher
    ###
    soketi:
        image: 'quay.io/soketi/soketi:latest-16-alpine'
        environment:
            SOKETI_DEBUG: '${SOKETI_DEBUG:-1}'
            SOKETI_METRICS_SERVER_PORT: '9601'
            SOKETI_DEFAULT_APP_ID: '${PUSHER_APP_ID}'
            SOKETI_DEFAULT_APP_KEY: '${PUSHER_APP_KEY}'
            SOKETI_DEFAULT_APP_SECRET: '${PUSHER_APP_SECRET}'
        ports:
            - '${PUSHER_PORT:-6001}:6001'
            - '${PUSHER_METRICS_PORT:-9601}:9601'
        networks:
            - dfs-network
        deploy:
            resources:
                limits:
                    cpus: "1"
                    memory: 256M
    
    ###
    ### 9 - Ejecuta la cola de trabajo de laravel (php artisan queue:work)
    ###
    dfs-app-backend-queue:  
        image: dfs-filesystem/app 
        volumes:  
            - './backend/:/var/www/html'
        depends_on:  
            - dfs-app-backend
            - redis
        environment:
            WWWUSER: '${WWWUSER}'
            LARAVEL_SAIL: 1
        networks:
            - dfs-network
        command: php artisan queue:work --sleep=3 --tries=3 --timeout=90 &

###
### Volumenes de datos para persistir la info de la app
###
volumes:
    sail-mysql:
        driver: local
    sail-redis:
        driver: local
    sail-minio:
        driver: local
